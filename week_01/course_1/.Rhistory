# Create a vector called course.students.number, with data: c(1, 30)
course.student.number <- c(1:30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade >= 80
# Check csg.over.mean
csg.over.80
# Filter the course.student.grade with csg.over.mean
course.student.grade[csg.over.80]
# Print over 80 details
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
# 基本變數資訊
person.name <- c("Jiyuian", "Shawnroom", "Bigmoumou")
person.sex <- c("F", "M", "M")
person.id <- c("jiyuian520", "shawnn520", "moumou123")
person.days <- c(201, 37, 99)
# 使用data.frame()，並以上述4個向量建立person.df
person.df <- data.frame(person.name, person.sex, person.id, person.days)
# 查看person.df結構
str(person.df)
# 查看person.df summary
summary(person.df)
# 印出person.df
person.df
# 印出person.df第一列
person.df[1, ]
# 印出person.df第二列第三欄
person.df[2, 3]
# 使用$ 指定出person.df中person.id欄位
person.df$person.id
# 使用order(), 將person.df$person.days排序後, 建立days.position
days.postion <- order(person.df$person.days)
days.postion
# 使用days.postion, 排序person.df
person.df[days.postion, ]
# 使用grepl()，找出person.df$person.id中有520精神的
spirit.520 <- grepl("520", person.df$person.id)
spirit.520
# 篩選出520家族的成員
person.df[spirit.520, ]
person.df
help('sprintf')
# 使用for loop 印出九九乘法表
# Ex: (1x1=1 1x2=2...1x9=9 ~ 9x1=9 9x2=18... 9x9=81)
for (i in 1:9){
for (j in 1:9){
print(sprintf("%d X %d = %d",i,j,i*j))
}
}
# 1.使用for loop 以及 if-else，印出大於50的偶數，並提示("偶數且大於50": 數字value)
# 2.特別規則：若數字為66，則提示("太66666666666了")並中止迴圈。
i=50
for(i in 50:100){
if(i==66){
print("太66666666666了")
break
}
if(i%%2==0){
print(paste("偶數且大於50:",i))
}
}
help('substr')
x <- 1000:9999
answer <- sample(x, size = 1, replace=T)
answer
answer <- as.character(answer)
answer
answer <- c(substr(answer,1,1),substr(answer,2,2),substr(answer,3,3),substr(answer,4,4))
answer
time <- 0
help('cat')
time <- 0
repeat{
enter <- as.numeric(readline("請輸入一組四位數字:"))
while(enter < 1000 || enter >9999){
cat("輸入錯誤!")
time <- time + 1
enter <- as.numeric(readline("請輸入一組四位數字:"))
}
enter <- as.character(enter)
enter <- c(substr(enter,1,1),substr(enter,2,2),substr(enter,3,3),substr(enter,4,4))
a <- 0
b <- 0
for(i in 1:4){
if(enter[i] == answer[i]){
a <- a + 1
}else{
for(j in 1:4){
if(enter[j] == answer[i] ){
b <- b + 1
}
}
}
}
cat(a,"A",b,"B","\n")
time <- time + 1
if(a == 4){cat("猜對!","共猜",time, "次", "\n")
break}
}
### function SayHello #####################################################
SayHello <- function (name) {
print(paste('Hello',name))
}
SayHello("shuen") # Output > "Hello, Pecu"
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('D:/CSX_lyhs/week_2/course_2/test_data.csv', sep =',', header = T , stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
df
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
df
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
df
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
